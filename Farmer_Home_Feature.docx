Farmer Home Feature Documentation

1. Executive Summary

The Farmer Home feature in the CropGuard mobile application serves as the main dashboard for farmers, providing quick access to essential tools, information, and navigation. It is designed to be user-friendly and informative, giving farmers an overview of their activities, product stats, notifications, and shortcuts to core features such as product management, pest detection, chatbot, and more.

2. User Experience and Flow

- The farmer logs into our app and is greeted by the Farmer Home screen.
- The Home screen displays:
  - A personalized welcome message.
  - Quick stats (e.g., number of products, recent sales, notifications).
  - Shortcut cards/buttons to Add Product, My Products, Pest Detection, Chatbot, and other key features.
  - Recent activity or notifications section.
  - Optionally, weather info or tips for the day.
- The user can tap any shortcut to navigate directly to the corresponding feature.
- The Home screen updates in real time as the farmer interacts with the app or receives new data.

3. Architecture Overview

Frontend (Flutter):
- UI: Dashboard layout with cards, stats, and navigation buttons.
- State Management: Provider/Bloc/Riverpod for managing dashboard data and updates.
- API Integration: Service class (e.g., ApiConsumer) for fetching stats, notifications, and other dynamic content.

Backend:
- RESTful API endpoints for fetching user stats, notifications, and relevant data.
- Database queries to aggregate and deliver dashboard information.
- Responds with JSON data for stats, notifications, and updates.

Architecture Flow:

User (Farmer App)
   ↓
Farmer Home Screen (Dashboard)
   ↓
API Service (HTTP GET)
   ↓
Backend API (Fetch Stats, Notifications, etc.)
   ↓
Database
   ↓
API Response (Stats/Notifications)
   ↓
App Feedback (UI Update)

4. Important Code Snippets (From Our Codebase)

A. Fetching Dashboard Data (farmer_home_cubit.dart)
---------------------------------------------------
Future<void> fetchDashboardData() async {
  emit(FarmerHomeLoading());
  try {
    final stats = await farmerHomeRepository.getDashboardStats();
    final notifications = await farmerHomeRepository.getNotifications();
    emit(FarmerHomeLoaded(stats, notifications));
  } catch (e) {
    emit(FarmerHomeError(e.toString()));
  }
}

B. Displaying Dashboard (farmer_home_view.dart)
-----------------------------------------------
@override
Widget build(BuildContext context) {
  return BlocBuilder<FarmerHomeCubit, FarmerHomeState>(
    builder: (context, state) {
      if (state is FarmerHomeLoading) {
        return Center(child: CircularProgressIndicator());
      } else if (state is FarmerHomeLoaded) {
        return Column(
          children: [
            Text('Welcome, ${state.stats.userName}!'),
            StatsCard(stats: state.stats),
            ShortcutGrid(onTapShortcut: _handleShortcut),
            NotificationsList(notifications: state.notifications),
          ],
        );
      } else if (state is FarmerHomeError) {
        return Center(child: Text('Error: ${state.message}'));
      }
      return Container();
    },
  );
}

C. Navigating to Features (shortcut_grid.dart)
----------------------------------------------
void _handleShortcut(ShortcutType type) {
  switch (type) {
    case ShortcutType.addProduct:
      context.go('/add-product');
      break;
    case ShortcutType.myProducts:
      context.go('/my-products');
      break;
    case ShortcutType.pestDetection:
      context.go('/pest-detection');
      break;
    case ShortcutType.chatbot:
      context.go('/chatbot');
      break;
    // Add more cases as needed
  }
}

5. Flow Diagram (Mermaid)

```mermaid
flowchart TD
    A["User logs in"] --> B["Farmer Home screen loads"]
    B --> C["Fetch stats & notifications from backend"]
    C --> D["Display dashboard with stats, shortcuts, notifications"]
    D --> E{"User taps shortcut?"}
    E -- "Yes" --> F["Navigate to selected feature"]
    E -- "No" --> D
    C --> G["Receive new data/notifications"]
    G --> D
```

6. Summary

The Farmer Home feature acts as the central hub for farmers, offering a personalized, real-time dashboard and seamless navigation to all core app features. In our code, the flow is: UI dashboard → API calls for stats/notifications → backend aggregation → UI updates, ensuring a smooth and informative user experience. 