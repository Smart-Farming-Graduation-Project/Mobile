Update Product Feature Documentation

1. Executive Summary

The Update Product feature allows farmers to modify details of their existing products in the CropGuard marketplace. This feature ensures that product information remains accurate and up-to-date, enabling farmers to respond to changes in inventory, pricing, or product descriptions efficiently.

2. User Experience and Flow

- The farmer navigates to their product list and selects a product to update.
- The app displays a pre-filled form with the product's current details (name, description, category, price, quantity, unit, images, and availability).
- The user edits any fields as needed and can add or remove images.
- On tapping "Update Product," the app validates the input and shows a loading indicator.
- The updated data is sent to the backend.
- The backend validates and updates the product in the database, then responds with success or error.
- The app displays a confirmation or error message and refreshes the product list.

3. Architecture Overview

Frontend (Flutter):
- UI: Form similar to Add Product, but pre-filled with existing product data.
- State Management: Provider/Bloc/Riverpod for managing form state and feedback.
- API Integration: Service class (e.g., ApiConsumer) for HTTP requests.

Backend:
- RESTful API endpoint (e.g., POST /api/products/update or PUT /api/products/{id}).
- Handles multipart/form-data for image upload.
- Validates and updates product data and images.
- Responds with JSON indicating success or failure.

Architecture Flow:

User (Farmer App)
   ↓
Edit Product Screen (Form & Validation)
   ↓
API Service (HTTP PUT/POST, multipart/form-data)
   ↓
Backend API (Validation, Update)
   ↓
Database & Image Storage
   ↓
API Response (Success/Error)
   ↓
App Feedback (UI Update)

4. Important Code Snippets (From Our Codebase)

A. UI Layer: Update Product Screen (update_products_view.dart)
--------------------------------------------------------
void _handleUpdate() {
  final validationErrors = _formController.getValidationErrors();

  if (validationErrors.isNotEmpty) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(validationErrors.first),
        backgroundColor: AppColors.kDangerColor,
      ),
    );
    return;
  }

  final updatedProduct = _formController.createProductEntity();
  if (updatedProduct != null) {
    getIt<UpdateProductCubit>().updateProduct(updatedProduct);
  }
}

B. Form Controller (update_product_form_controller.dart)
-----------------------------------------------------
ProductEntity? createProductEntity() {
  if (!validateForm()) {
    return null;
  }

  return ProductEntity(
    id: existingProduct.id, // Ensure the ID is included for update
    name: nameController.text,
    description: descriptionController.text,
    price: double.parse(priceController.text),
    quantity: int.parse(quantityController.text),
    category: selectedCategory!.categoryName,
    images: selectedImages,
    isAvailable: isAvailable,
  );
}

C. Cubit Logic (update_product_cubit.dart)
---------------------------------------
Future<void> updateProduct(ProductEntity product) async {
  if (!isClosed) {
    emit(UpdateProductLoading());
  }

  try {
    final result = await updateProductUseCase(product);

    if (!isClosed) {
      result.fold(
        (failure) => emit(UpdateProductError(failure.message)),
        (success) => emit(UpdateProductSuccess(success)),
      );
    }
  } catch (e) {
    if (!isClosed) {
      emit(UpdateProductError(e.toString()));
    }
  }
}

D. Repository Implementation (update_product_repository_impl.dart)
-----------------------------------------------------------
@override
Future<Either<FailureModel, String>> updateProduct(ProductEntity product) async {
  try {
    final productModel = ProductModel(
      id: product.id,
      name: product.name,
      description: product.description,
      price: product.price,
      quantity: product.quantity,
      category: product.category,
      images: product.images,
      isAvailable: product.isAvailable,
    );

    final result = await remoteDataSource.updateProduct(productModel);

    return Right(result);
  } on ServerException catch (e) {
    return Left(FailureModel(message: e.errorModel.errorMessage.toString()));
  } on NetworkException catch (e) {
    return Left(FailureModel(message: e.message.toString()));
  } catch (e) {
    return Left(FailureModel(message: e.toString()));
  }
}

E. Remote Data Source (update_product_remote_data_source.dart)
------------------------------------------------------
@override
Future<String> updateProduct(ProductModel product) async {
  final Map<String, dynamic> formDataMap = {};

  for (int i = 0; i < product.images.length; i++) {
    formDataMap['Images'] = await MultipartFile.fromFile(
      product.images[i].path,
      filename: 'product_image_$i.jpg',
      contentType: DioMediaType('image', 'jpeg'),
    );
  }

  final queryParameters = {
    'Id': product.id,
    'Name': product.name,
    'Description': product.description,
    'Price': product.price.toString(),
    'CategoryName': product.category,
    'Availability': product.isAvailable ? 'Sale' : 'NotAvailable',
  };

  final response = await api.put(
    EndPoints.updateProduct,
    data: formDataMap,
    queryParameters: queryParameters,
    isFormData: true,
  );

  return response[ApiKeys.data];
}

5. Flow Diagram (Mermaid)

```mermaid
flowchart TD
    A["User opens Update Product screen"] --> B["Form pre-filled with product data"]
    B --> C["User edits fields and images"]
    C --> D["Taps 'Update Product'"]
    D --> E{"Form validation in app"}
    E -- "Fail" --> F["Show error"]
    E -- "Pass" --> G["Show loading indicator"]
    G --> H["Send updated data & images to backend API"]
    H --> I{"Backend validation & update"}
    I -- "Fail" --> J["Show error"]
    I -- "Pass" --> K["Show success, update product list"]
```

6. Summary

The Update Product feature allows farmers to keep their product information current and accurate. In our code, the flow is: UI input (pre-filled form) → local validation → data packaging → API call → backend processing → user feedback, with robust error handling and state management at each step. 