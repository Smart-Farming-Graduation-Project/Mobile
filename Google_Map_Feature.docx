Google Map Feature Documentation

1. Executive Summary

The Google Map feature in the CropGuard mobile application provides location-based services to help users find nearby farmers, markets, and agricultural services. This feature enhances the user experience by offering geographical context, enabling users to discover local suppliers, and facilitating location-based product searches and deliveries.

2. User Experience and Flow

- Users access the Map screen from the main navigation or through location-based features.
- The map displays:
  - User's current location (with permission).
  - Markers for nearby farmers, markets, and agricultural services.
  - Product availability in different areas.
  - Delivery zones and service areas.
- Users can:
  - View their current location and nearby points of interest.
  - Tap on markers to see details about farmers or markets.
  - Search for products or services in specific areas.
  - Get directions to selected locations.
  - Filter map content by category (farmers, markets, services).
- The map updates in real time as new locations or products become available.

3. Architecture Overview

Frontend (Flutter):
- UI: Google Maps widget, location markers, search bar, and filtering options.
- State Management: Provider/Bloc/Riverpod for managing map state and location data.
- API Integration: Service class (e.g., ApiConsumer) for fetching location data and Google Maps API integration.

Backend:
- RESTful API endpoints for fetching location-based data, nearby services, and geographical information.
- Integration with Google Maps API for geocoding, directions, and location services.
- Database queries to retrieve location data and spatial information.
- Responds with JSON data containing location coordinates, service details, and map markers.

Architecture Flow:

User (App)
   ↓
Map Screen (Google Maps Widget)
   ↓
API Service (HTTP GET - Location Data)
   ↓
Backend API (Fetch Locations & Services)
   ↓
Google Maps API & Database
   ↓
API Response (Location Data & Markers)
   ↓
App Feedback (Map Display)

4. Important Code Snippets (From Our Codebase)

A. Initializing Map (google_map_view.dart)
------------------------------------------
@override
void initState() {
  super.initState();
  _initializeMap();
}

Future<void> _initializeMap() async {
  final position = await _getCurrentLocation();
  setState(() {
    _initialCameraPosition = CameraPosition(
      target: LatLng(position.latitude, position.longitude),
      zoom: 12.0,
    );
  });
  await _loadNearbyLocations();
}

Future<Position> _getCurrentLocation() async {
  bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
  if (!serviceEnabled) {
    throw Exception('Location services are disabled.');
  }
  
  LocationPermission permission = await Geolocator.checkPermission();
  if (permission == LocationPermission.denied) {
    permission = await Geolocator.requestPermission();
    if (permission == LocationPermission.denied) {
      throw Exception('Location permissions are denied.');
    }
  }
  
  return await Geolocator.getCurrentPosition();
}

B. Loading Map Data (google_map_cubit.dart)
-------------------------------------------
Future<void> loadNearbyLocations() async {
  emit(GoogleMapLoading());
  try {
    final currentPosition = await _getCurrentPosition();
    final locations = await googleMapRepository.getNearbyLocations(
      currentPosition.latitude,
      currentPosition.longitude,
    );
    emit(GoogleMapLoaded(locations));
  } catch (e) {
    emit(GoogleMapError(e.toString()));
  }
}

C. Displaying Map (google_map_view.dart)
----------------------------------------
@override
Widget build(BuildContext context) {
  return BlocBuilder<GoogleMapCubit, GoogleMapState>(
    builder: (context, state) {
      return Scaffold(
        body: GoogleMap(
          initialCameraPosition: _initialCameraPosition,
          onMapCreated: (GoogleMapController controller) {
            _mapController = controller;
          },
          markers: state is GoogleMapLoaded ? _createMarkers(state.locations) : {},
          myLocationEnabled: true,
          myLocationButtonEnabled: true,
        ),
        floatingActionButton: FloatingActionButton(
          onPressed: _getCurrentLocation,
          child: Icon(Icons.my_location),
        ),
      );
    },
  );
}

Set<Marker> _createMarkers(List<LocationData> locations) {
  return locations.map((location) {
    return Marker(
      markerId: MarkerId(location.id),
      position: LatLng(location.latitude, location.longitude),
      infoWindow: InfoWindow(
        title: location.name,
        snippet: location.description,
        onTap: () => _showLocationDetails(location),
      ),
    );
  }).toSet();
}

5. Flow Diagram (Mermaid)

```mermaid
flowchart TD
    A["User opens map screen"] --> B["Request location permissions"]
    B --> C["Get current location"]
    C --> D["Initialize Google Maps"]
    D --> E["Load nearby locations from backend"]
    E --> F["Display markers on map"]
    F --> G{"User interaction?"}
    G -- "Tap marker" --> H["Show location details"]
    G -- "Search area" --> I["Filter locations by area"]
    G -- "Get directions" --> J["Open directions in maps app"]
    H --> K["Navigate to location details"]
    I --> F
    J --> L["External maps integration"]
```

6. Summary

The Google Map feature provides location-based services to enhance the agricultural marketplace experience. In our code, the flow is: UI map initialization → location permissions → API calls for location data → Google Maps integration → marker display, enabling users to discover and connect with local agricultural services and suppliers. 