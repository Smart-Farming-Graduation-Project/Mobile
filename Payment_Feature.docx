Payment Feature Documentation

1. Executive Summary

The Payment feature in the CropGuard mobile application enables secure and seamless financial transactions between buyers and farmers. This feature integrates with payment gateways to process orders, handle multiple payment methods, and ensure secure transaction processing. It supports various payment options including credit/debit cards, digital wallets, and bank transfers, providing a comprehensive payment solution for the agricultural marketplace.

2. User Experience and Flow

- Users proceed to payment from the cart or checkout screen after reviewing their order.
- The Payment screen displays:
  - Order summary with items, quantities, and total amount.
  - Available payment methods (cards, digital wallets, bank transfer).
  - Delivery address and contact information.
  - Payment form with card details or wallet selection.
- Users can:
  - Select their preferred payment method.
  - Enter payment details (card number, expiry, CVV).
  - Apply discount codes or vouchers.
  - Review order details before confirmation.
  - Complete the payment transaction.
- Upon successful payment:
  - Users receive a confirmation with order details.
  - Payment confirmation is sent to the farmer.
  - Order status is updated in the system.

3. Architecture Overview

Frontend (Flutter):
- UI: Payment form, order summary, payment method selection, and confirmation screens.
- State Management: Provider/Bloc/Riverpod for managing payment state and transaction flow.
- API Integration: Service class (e.g., ApiConsumer) for payment processing and order management.

Backend:
- RESTful API endpoints for payment processing, order creation, and transaction management.
- Integration with payment gateways (Stripe, PayPal, etc.) for secure transaction processing.
- Database storage for orders, payment records, and transaction history.
- Responds with JSON data for payment status and order confirmations.

Architecture Flow:

User (App)
   ↓
Payment Screen (Form & Methods)
   ↓
API Service (HTTP POST)
   ↓
Backend API (Payment Processing)
   ↓
Payment Gateway & Database
   ↓
API Response (Payment Status)
   ↓
App Feedback (Confirmation/Error)

4. Important Code Snippets (From Our Codebase)

A. Payment Processing (payment_cubit.dart)
------------------------------------------
Future<void> processPayment(PaymentData paymentData) async {
  emit(PaymentLoading());
  try {
    final result = await paymentRepository.processPayment(paymentData);
    emit(PaymentSuccess(result.orderId, result.transactionId));
  } catch (e) {
    emit(PaymentError(e.toString()));
  }
}

B. Stripe Integration (stripe_service.dart)
-------------------------------------------
class StripeService {
  static const String _publishableKey = 'pk_test_...';
  
  Future<PaymentIntent> createPaymentIntent(double amount, String currency) async {
    final response = await http.post(
      Uri.parse('$baseUrl/create-payment-intent'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'amount': (amount * 100).round(), // Convert to cents
        'currency': currency,
      }),
    );
    
    return PaymentIntent.fromJson(json.decode(response.body));
  }
  
  Future<void> confirmPayment(String paymentIntentId, String paymentMethodId) async {
    final response = await http.post(
      Uri.parse('$baseUrl/confirm-payment'),
      headers: {'Content-Type': 'application/json'},
      body: json.encode({
        'payment_intent_id': paymentIntentId,
        'payment_method_id': paymentMethodId,
      }),
    );
    
    if (response.statusCode != 200) {
      throw Exception('Payment confirmation failed');
    }
  }
}

C. Payment Screen (payment_view.dart)
-------------------------------------
@override
Widget build(BuildContext context) {
  return BlocBuilder<PaymentCubit, PaymentState>(
    builder: (context, state) {
      return Scaffold(
        appBar: AppBar(title: Text('Payment')),
        body: Column(
          children: [
            OrderSummary(order: widget.order),
            PaymentMethodSelector(
              onMethodSelected: (method) => _selectedMethod = method,
            ),
            PaymentForm(
              paymentMethod: _selectedMethod,
              onPaymentSubmit: _processPayment,
            ),
            if (state is PaymentLoading)
              LinearProgressIndicator(),
            if (state is PaymentError)
              Text('Error: ${state.message}', style: TextStyle(color: Colors.red)),
          ],
        ),
      );
    },
  );
}

D. Payment Form (payment_form.dart)
-----------------------------------
Future<void> _processPayment() async {
  if (!_formKey.currentState!.validate()) return;
  
  final paymentData = PaymentData(
    amount: widget.order.total,
    currency: 'USD',
    paymentMethod: _selectedMethod,
    cardDetails: _selectedMethod == PaymentMethod.card ? _getCardDetails() : null,
    orderId: widget.order.id,
  );
  
  await context.read<PaymentCubit>().processPayment(paymentData);
}

5. Flow Diagram (Mermaid)

```mermaid
flowchart TD
    A["User proceeds to payment"] --> B["Display order summary and payment methods"]
    B --> C["User selects payment method"]
    C --> D["User enters payment details"]
    D --> E["Validate payment information"]
    E --> F{"Validation successful?"}
    F -- "Yes" --> G["Process payment through gateway"]
    F -- "No" --> H["Show validation errors"]
    G --> I{"Payment successful?"}
    I -- "Yes" --> J["Create order and send confirmation"]
    I -- "No" --> K["Show payment error"]
    J --> L["Update order status"]
    K --> M["Allow retry or alternative payment"]
    H --> D
    M --> D
```

6. Summary

The Payment feature provides secure and reliable transaction processing for the agricultural marketplace. In our code, the flow is: UI payment form → payment validation → gateway processing → order creation → confirmation, ensuring smooth and secure financial transactions between buyers and farmers. 