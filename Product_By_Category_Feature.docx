Product By Category Feature Documentation

1. Executive Summary

The Product By Category feature in the CropGuard mobile application enables users to browse and discover products organized by their respective categories (e.g., Fruits, Vegetables, Grains). This feature streamlines product discovery, enhances user navigation, and supports targeted shopping experiences for both buyers and farmers.

2. User Experience and Flow

- The user navigates to the Categories section from the home screen or menu.
- The Categories screen displays a list or grid of available product categories, each with an icon or image.
- The user taps a category to view all products within that category.
- The Product By Category screen displays a list/grid of products filtered by the selected category, showing product images, names, prices, and availability.
- The user can tap a product to view its details, add it to the cart, or mark it as a favorite.
- The list updates in real time as new products are added or existing ones are updated.

3. Architecture Overview

Frontend (Flutter):
- UI: Category list/grid, product list/grid, and navigation between them.
- State Management: Provider/Bloc/Riverpod for managing category and product state.
- API Integration: Service class (e.g., ApiConsumer) for fetching categories and products by category.

Backend:
- RESTful API endpoints for fetching categories and products by category.
- Database queries to filter products based on category selection.
- Responds with JSON data for categories and filtered product lists.

Architecture Flow:

User (App)
   ↓
Categories Screen (List/Grid)
   ↓
User selects category
   ↓
API Service (HTTP GET)
   ↓
Backend API (Fetch Products By Category)
   ↓
Database
   ↓
API Response (Filtered Products)
   ↓
App Feedback (UI Update)

4. Important Code Snippets (From Our Codebase)

A. Fetching Categories (categories_cubit.dart)
----------------------------------------------
Future<void> fetchCategories() async {
  emit(CategoriesLoading());
  try {
    final categories = await categoriesRepository.getCategories();
    emit(CategoriesLoaded(categories));
  } catch (e) {
    emit(CategoriesError(e.toString()));
  }
}

B. Fetching Products By Category (category_products_cubit.dart)
--------------------------------------------------------------
Future<void> fetchProductsByCategory(String categoryId) async {
  emit(CategoryProductsLoading());
  try {
    final products = await categoryProductsRepository.getProductsByCategory(categoryId);
    emit(CategoryProductsLoaded(products));
  } catch (e) {
    emit(CategoryProductsError(e.toString()));
  }
}

C. Displaying Products By Category (category_products_view.dart)
----------------------------------------------------------------
@override
Widget build(BuildContext context) {
  return BlocBuilder<CategoryProductsCubit, CategoryProductsState>(
    builder: (context, state) {
      if (state is CategoryProductsLoading) {
        return Center(child: CircularProgressIndicator());
      } else if (state is CategoryProductsLoaded) {
        return GridView.builder(
          itemCount: state.products.length,
          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),
          itemBuilder: (context, index) {
            final product = state.products[index];
            return ProductCard(product: product);
          },
        );
      } else if (state is CategoryProductsError) {
        return Center(child: Text('Error: ${state.message}'));
      }
      return Container();
    },
  );
}

5. Flow Diagram (Mermaid)

```mermaid
flowchart TD
    A["User opens Categories screen"] --> B["Categories list/grid displayed"]
    B --> C["User selects a category"]
    C --> D["Fetch products by category from backend"]
    D --> E["Display filtered product list"]
    E --> F{"User taps product?"}
    F -- "Yes" --> G["Show product details"]
    F -- "No" --> E
    D --> H["Receive new/updated products"]
    H --> E
```

6. Summary

The Product By Category feature makes product discovery efficient and intuitive. In our code, the flow is: UI category/product list → API calls for categories/products → backend filtering → UI updates, supporting a seamless and targeted shopping experience. 